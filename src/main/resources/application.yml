spring:
  datasource:
    url: jdbc:mysql://localhost/devops_service?useUnicode=true&characterEncoding=utf-8&useSSL=false
    username: choerodon
    password: choerodon
    hikari:
      maximum-pool-size: 15 # 数据库连接池连接数
  redis:
    host: localhost
    database: ${SPRING_REDIS_DATABASE:1}
  http:
    encoding:
      charset: UTF-8
      force: true
      enabled: true
services:
  harbor:
    baseUrl: "harbor.example.com" # harbor地址
    username: "123456" # harbor用户名
    password: "123456" # 对应harbor用户名的密码
    insecureSkipTlsVerify: false
  gitlab:
    url: "gitlab.example.com" # gitlab地址
    sshUrl: "gitlab.example.com" # 用于ssh操作的gitlab地址
    projectLimit: 100 # gitlab用户可以创建的项目的数量限制
  helm:
    url: "helm.example.com" # 存放helm chart包的仓库地址
    userName: # Helm chart 仓库 的用户名, 选填(与密码要配对)
    password: # Helm chart 仓库 的密码, 选填(与用户名要配对)
  gateway:
    url: "http://api.example.com" # 网关地址
  sonarqube:
    url: http://sonarqube.example.com/
    username: admin
    password: password
hzero:
  websocket:
    # 用于连接websocket的路径
    websocket: /websocket
    # 与当前服务的redis数据库一致
    redisDb: ${SPRING_REDIS_DATABASE:1}
    # 后端长连通信密钥
    secretKey: devops_ws
choerodon:
  saga:
    consumer:
      core-thread-num: 20
      max-thread-num:  20 # 消费线程数
      poll-interval: 3 # 拉取消息的间隔(秒)，默认1秒
      enabled: true # 是否启用消费端
  schedule:
    consumer:
      enabled: true # 启用任务调度消费端
      thread-num: 1 # 任务调度消费线程数
      poll-interval-ms: 1000 # 拉取间隔，默认1000毫秒
  resource:
    jwt:
      ignore: /workflow/**, /sonar/**, /ci, /sonar/info, /v2/api-docs, /agent/**, /ws/**, /gitlab/email, /webhook/**, /v2/choerodon/**, /choerodon/**, /actuator/**, /prometheus, /devops/**, /pre_stop, /websocket
agent:
  version: "0.5.0" # devops-service此版本所预期的 choerodon-agent 的版本
  serviceUrl: "agent.example.com" # 用于 choerodon-agent 连接 devops-service 的地址
  certManagerUrl: "agent.example.com" # 存放CertManager的地址，用于安装
  repoUrl: "helm.example.com" # 存放agent的地址，用于安装
mybatis:
  mapperLocations: classpath*:/mapper/*.xml
  configuration:
    mapUnderscoreToCamelCase: true
    key-generator: snowflake
    snowflake:
      start-timestamp: 1577808000000
      meta-provider: redis
      meta-provider-redis-db: ${SPRING_REDIS_DATABASE:1}
      meta-provider-redis-refresh-interval: 540000
      meta-provider-redis-expire: 600000

feign:
  hystrix:
    shareSecurityContext: true
    command:
      default:
        execution:
          isolation:
            thread:
              timeoutInMilliseconds: 30000
ribbon:
  ConnectTimeout: 50000
  ReadTimeout: 50000

asgard-servie:
  ribbon:
    ConnectTimeout: 50000
    ReadTimeout: 50000

logging:
  level:
#    io.choerodon.event.consumer: debug
#    com.zaxxer: debug
    io.choerodon.feign: warn
#    io.choerodon.devops.app.service: debug
  config: classpath:logback-spring.xml


devops:
  # 流水线生成Gitlab Ci文件中默认的runner 镜像地址
  ci:
    default:
      image: registry.cn-shanghai.aliyuncs.com/c7n/cibase:0.10.1
    pipeline:
      sync:
        executor:
          # 核心线程池大小
          corePoolSize: 5
          # 最大线程池大小
          maxPoolSize: 8
        unterminated:
          # ci流水线对未终结的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        pending:
          # ci流水线对pending的流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        jobEmpty:
          # ci流水线对非跳过状态的且没有job信息流水线进行数据补偿的时间阈值, 单位: 毫秒 (默认600秒)
          thresholdMilliSeconds: 600000
        refresh:
          # redisKey的过期时间, 用于控制同一条流水线的刷新间隔, 减少对gitlab的访问次数
          periodSeconds: 60
  # 批量部署的请求条数限制
  batch:
    deployment:
      maxSize: 20

# websocket的最大缓冲区大小，单位字节byte
websocket:
  buffer:
    maxTextMessageSize: 4194304
    maxBinaryMessageSize: 4194304