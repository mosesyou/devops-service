<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="io.choerodon.devops.infra.mapper.PipelineRecordMapper">
    <select id="listByOptions" resultType="io.choerodon.devops.infra.dto.PipelineRecordDTO">
        <if test="classifyParam.executed ==null and classifyParam.pendingcheck == null and classifyParam.reviewed==null">
            <include refid="selectSql"/>
            <if test="pipelineId != null">
                AND dpr.pipeline_id = #{pipelineId}
            </if>
            <include refid="sqlparam"/>
        </if>
        <if test="classifyParam.pendingcheck != null">
            SELECT DISTINCT
            dpr.id,
            dpr. STATUS,
            dpr.trigger_type,
            dpr.pipeline_name,
            dpr.last_update_date,
            dpr.project_id,
            dpr.pipeline_id,
            dpr.error_info
            FROM
            devops_pipeline_record dpr
            JOIN devops_pipeline_stage_record dpsr ON dpsr.pipeline_record_id = dpr.id AND dpsr.`status` = 'pendingcheck'
            JOIN devops_pipeline_task_record dptr ON dptr.stage_record_id = dpsr.id
            AND dptr.audit_user LIKE CONCAT(CONCAT('%', #{classifyParam.userId}), '%')
            AND NOT EXISTS (
            SELECT
            1
            FROM
            devops_pipeline_user_record_rel dpurl
            WHERE
            dpurl.task_record_id = dptr.id
            AND dpurl.user_id = #{classifyParam.userId}
            )
            WHERE
            dpr.project_id = #{projectId}
            AND dpr.`status` = 'pendingcheck'
            <if test="pipelineId != null">
                AND dpr.pipeline_id = #{pipelineId}
            </if>
            <include refid="sqlparam"/>
            UNION
            SELECT DISTINCT
            dpr.id,
            dpr. STATUS,
            dpr.trigger_type,
            dpr.pipeline_name,
            dpr.last_update_date,
            dpr.project_id,
            dpr.pipeline_id,
            dpr.error_info
            FROM
            devops_pipeline_record dpr
            JOIN devops_pipeline_stage_record dpsr ON dpsr.pipeline_record_id = dpr.id
            AND dpsr.id IN (
            SELECT
            max(dpsr.id)
            FROM
            devops_pipeline_stage_record dpsr
            WHERE
            dpsr.pipeline_record_id IN (
            SELECT
            dpr.id
            FROM
            devops_pipeline_record dpr
            WHERE
            dpr.project_id = #{projectId}
            AND dpr.`status` = 'pendingcheck'
            AND NOT EXISTS (
            SELECT
            1
            FROM
            devops_pipeline_stage_record dpsr
            WHERE
            dpsr.pipeline_record_id = dpr.id
            AND dpsr. STATUS = 'pendingcheck'
            )
            )
            AND dpsr. STATUS = 'success'
            GROUP BY
            dpsr.pipeline_record_id
            )
            AND dpsr.audit_user LIKE CONCAT(CONCAT('%', #{classifyParam.userId}), '%')
            WHERE
            dpr.project_id = #{projectId}
            AND dpr.`status` = 'pendingcheck'
            <if test="pipelineId != null">
                AND dpr.pipeline_id = #{pipelineId}
            </if>
            <include refid="sqlparam"/>
        </if>

        <if test="classifyParam.reviewed != null">
            <if test="classifyParam.pendingcheck != null">
                UNION
            </if>
            <include refid="reviewedSql"/>
        </if>

        <if test="classifyParam.executed !=null">
            <if test="classifyParam.reviewed !=null or classifyParam.pendingcheck != null">
                UNION
            </if>
            <include refid="selectSql"/>
            <if test="pipelineId != null">
                AND dpr.pipeline_id = #{pipelineId}
            </if>
            <include refid="sqlparam"/>
            AND(dpr.created_by = #{classifyParam.userId} AND dpr.trigger_type = 'manual')
        </if>

    </select>

    <select id="queryById" resultType="io.choerodon.devops.infra.dto.PipelineRecordDTO">
        SELECT
        dpr.id,
        dpr. STATUS,
        dpr.trigger_type,
        dpr.last_update_date,
        dpr.project_id,
        dpr.pipeline_id,
        dpr.`status`,
        dpr.creation_date,
        dpr.business_key,
        dpr.bpm_definition,
        dpr.pipeline_name,
        dpr.edited,
        dpr.audit_user
        FROM
        devops_pipeline_record dpr
        WHERE dpr.id = #{pipelineRecordId}
    </select>


    <select id="listAllPipelineRecordAndEnv" resultType="io.choerodon.devops.infra.dto.PipelineRecordDTO">
        SELECT
        dpr.id,
        dpr.project_id,
        dpr.`status`,
        dpr.creation_date,
        GROUP_CONCAT( DISTINCT dpad.env_id ) env
        FROM
        devops_pipeline_record dpr
        LEFT JOIN devops_pipeline_stage dps ON dpr.pipeline_id = dps.pipeline_id
        LEFT JOIN devops_pipeline_task dpt ON dpt.stage_id = dps.id
        LEFT JOIN devops_pipeline_app_service_deploy dpad ON dpad.id = dpt.app_service_deploy_id
        <if test="pipelineRecordId != null">
            WHERE dpr.id = #{pipelineRecordId}
        </if>
        GROUP BY
        dpr.id
    </select>

    <sql id="sqlparam">
        <if test='searchParam != null'>
            <if test='searchParam.status != null and searchParam.status.length > 0'>
                AND
                    dpr.status = #{searchParam.status, jdbcType=VARCHAR}
            </if>
            <if test='searchParam.triggerType != null and searchParam.triggerType.length > 0'>
                AND
                    dpr.trigger_type = #{searchParam.triggerType, jdbcType=VARCHAR}
            </if>
        </if>
        <if test='params != null and params.size>0'>
            AND
            <foreach collection="params" item="param" open="(" separator=" OR " close=")">
                ( dpr.status = #{param, jdbcType=VARCHAR}
                OR dpr.trigger_type = #{param, jdbcType=VARCHAR}
                OR dpr.pipeline_name= #{param, jdbcType=VARCHAR})
            </foreach>
        </if>
    </sql>

    <sql id="reviewedSql">
        SELECT
        distinct dpr.id,
        dpr. STATUS,
        dpr.trigger_type,
        dpr.pipeline_name,
        dpr.last_update_date,
        dpr.project_id,
        dpr.pipeline_id,
        dpr.error_info
        FROM
        devops_pipeline_record dpr
        JOIN devops_pipeline_stage_record dpsr ON dpsr.pipeline_record_id = dpr.id
        JOIN devops_pipeline_task_record dptr ON dptr.stage_record_id = dpsr.id
        JOIN devops_pipeline_user_record_rel dpurr ON (
        dpurr.task_record_id = dptr.id
        OR dpurr.stage_record_id = dpsr.id
        ) AND dpurr.user_id = #{classifyParam.userId}
        WHERE
        dpr.project_id = #{projectId}
        <if test="pipelineId != null">
            AND dpr.pipeline_id = #{pipelineId}
        </if>
        <include refid="sqlparam"/>
    </sql>

    <sql id="selectSql">
        SELECT
        dpr.id,
        dpr. STATUS,
        dpr.trigger_type,
        dpr.pipeline_name,
        dpr.last_update_date,
        dpr.project_id,
        dpr.pipeline_id,
        dpr.error_info
        FROM
        devops_pipeline_record dpr
        WHERE
        dpr.project_id = #{projectId}
        <if test="pipelineId != null">
            AND dpr.pipeline_id = #{pipelineId}
        </if>
    </sql>

    <update id="updateEdited">
        UPDATE devops_pipeline_record dpr
        SET dpr.edited = 1 where dpr.pipeline_id = #{pipelineId}
    </update>

    <select id="queryAllRecordUserIds" resultType="java.lang.Long">
        SELECT
            dpurr.user_id
        FROM
            devops_pipeline_user_record_rel dpurr
        JOIN devops_pipeline_stage_record dpsr ON dpsr.pipeline_record_id = #{pipelineRecordId}
        JOIN devops_pipeline_task_record dptr ON dptr.stage_record_id = dpsr.id
        WHERE
            dpurr.task_record_id = dptr.id
        OR dpurr.stage_record_id = dpsr.id
    </select>

    <select id="listAllPipelineRecordToMigrate" resultType="io.choerodon.devops.infra.dto.PipelineRecordDTO">
        SELECT dpr.id, dpr.project_id, dpr.`status`, dpr.creation_date, GROUP_CONCAT(DISTINCT dpad.env_id) env
        FROM devops_pipeline_record dpr
                 LEFT JOIN devops_pipeline_stage dps ON dpr.pipeline_id = dps.pipeline_id
                 LEFT JOIN devops_pipeline_task dpt ON dpt.stage_id = dps.id
                 LEFT JOIN devops_pipeline_app_service_deploy dpad ON dpad.id = dpt.app_service_deploy_id
                 LEFT JOIN devops_deploy_record ddr ON dpr.id = ddr.deploy_id AND ddr.deploy_type = 'auto'
        WHERE ddr.id IS NULL
        GROUP BY dpr.id;
    </select>
</mapper>
